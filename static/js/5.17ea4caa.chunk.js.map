{"version":3,"file":"static/js/5.17ea4caa.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/components/SideWidgets/Login/LoginForm.module.scss?0eab","components/SideWidgets/Login/LoginForm.tsx","components/SideWidgets/Login/Login.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"buttonBlock\":\"LoginForm_buttonBlock__PZ5c5\",\"forgot\":\"LoginForm_forgot__LFWW4\",\"navlink\":\"LoginForm_navlink__pWNbI\"};","import React from 'react';\r\nimport { useFormik } from 'formik';\r\nimport { CheckboxFormik, InputFormik } from '../../00-Common/InputFormik/InputFormik';\r\nimport css from './LoginForm.module.scss';\r\nimport { AuthButton } from '../../00-Common/AuthButton/AuthButton';\r\nimport { Navigate, NavLink } from 'react-router-dom';\r\nimport { useAppSelector } from '../../../hooks/hooks';\r\nimport { PreloaderSmall } from '../../00-Common/PreloaderSmall/PreloaderSmall';\r\n\r\ntype FormikErrorType = {\r\n  email?: string;\r\n  password?: string;\r\n  rememberMe?: boolean;\r\n  captcha?: string;\r\n};\r\n\r\ntype LoginFormType = {\r\n  loginTC: (\r\n    email: string,\r\n    password: string,\r\n    rememberMe: boolean,\r\n    captcha: string,\r\n    setStatus: any,\r\n    setSubmitting: any\r\n  ) => void;\r\n  captchaUrl: string | null;\r\n};\r\n\r\nexport const LoginForm: React.FC<LoginFormType> = ({ loginTC, captchaUrl }) => {\r\n  const isFetching = useAppSelector(state => state.app.fetching);\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      email: '',\r\n      password: '',\r\n      rememberMe: false,\r\n      captcha: ''\r\n    },\r\n    validate: values => {\r\n      const errors: FormikErrorType = {};\r\n      if (!values.email) {\r\n        errors.email = 'required';\r\n      } else if (!/^[A-Z\\d._%+-]+@[A-Z\\d.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n        errors.email = 'invalid email address';\r\n      }\r\n      if (!values.password) {\r\n        errors.password = 'required';\r\n      } else if (values.password.trim().length < 4) {\r\n        errors.password = 'min 4 symbols';\r\n      }\r\n      return errors;\r\n    },\r\n    onSubmit: (values, onSubmitProps) => {\r\n      loginTC(\r\n        values.email,\r\n        values.password,\r\n        values.rememberMe,\r\n        values.captcha,\r\n        onSubmitProps.setStatus,\r\n        onSubmitProps.setSubmitting\r\n      );\r\n      onSubmitProps.setSubmitting(true);\r\n    }\r\n  });\r\n  const isAuth = useAppSelector(state => state.auth.data.id);\r\n  if (isAuth) {\r\n    return <Navigate to={'/profile/' + isAuth} />;\r\n  }\r\n  const onCancelClick = () => {\r\n    formik.resetForm();\r\n    formik.setTouched({});\r\n  };\r\n  return (\r\n    <form className={css.loginForm} onSubmit={formik.handleSubmit}>\r\n      <InputFormik\r\n        placeholder={'email'}\r\n        getFieldProps={formik.getFieldProps('email')}\r\n        errors={formik.errors.email}\r\n        type={'text'}\r\n      />\r\n      <InputFormik\r\n        placeholder={'password'}\r\n        getFieldProps={formik.getFieldProps('password')}\r\n        errors={formik.errors.password}\r\n        type={'password'}\r\n      />\r\n\r\n      <CheckboxFormik label={'Remember Me'} getFieldProps={formik.getFieldProps('rememberMe')} />\r\n\r\n      {formik.status && <span style={{ color: 'red' }}>{formik.status}</span>}\r\n      {captchaUrl && (\r\n        <div className={css.fields}>\r\n          <img src={captchaUrl} alt=\"captchaUrl\" />\r\n          <InputFormik\r\n            placeholder={'captcha'}\r\n            getFieldProps={formik.getFieldProps('captcha')}\r\n            errors={formik.errors.email}\r\n            type={'text'}\r\n          />\r\n          {formik.errors.captcha ? <div>{formik.errors.captcha}</div> : null}\r\n        </div>\r\n      )}\r\n\r\n      <div className={css.buttonBlock}>\r\n        <AuthButton type=\"submit\">Login</AuthButton>\r\n        {isFetching && <PreloaderSmall />}\r\n        <div className={css.forgot}>\r\n          <NavLink className={css.navlink} onClick={onCancelClick} to={'/registr'}>\r\n            Register account\r\n          </NavLink>\r\n          <NavLink className={css.navlink} onClick={onCancelClick} to={'/recovery'}>\r\n            Forget password\r\n          </NavLink>\r\n        </div>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { LoginForm } from './LoginForm';\r\nimport { connect } from 'react-redux';\r\nimport { loginTC } from '../../../redux/auth-reducer';\r\nimport { RootState } from '../../../redux/redux-store';\r\n\r\nconst Login: React.FC<ProfilePropsType> = ({ loginTC, captchaUrl }) => {\r\n  return (\r\n    <>\r\n      <LoginForm loginTC={loginTC} captchaUrl={captchaUrl} />\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state: RootState): MapStateToPropsType => {\r\n  return {\r\n    isAuth: state.auth.isAuth,\r\n    captchaUrl: state.auth.captcha\r\n  } as MapStateToPropsType;\r\n};\r\n\r\nexport default connect(mapStateToProps, { loginTC })(Login);\r\n\r\n// types\r\ntype MapStateToPropsType = {\r\n  isAuth: boolean;\r\n  captchaUrl: any;\r\n};\r\n\r\ntype MapDispatchToPropsType = {\r\n  loginTC: (\r\n    email: string,\r\n    password: string,\r\n    rememberMe: boolean,\r\n    captcha: string,\r\n    setStatus: any,\r\n    setSubmitting: any\r\n  ) => void;\r\n};\r\n\r\nexport type ProfilePropsType = MapStateToPropsType & MapDispatchToPropsType;\r\n"],"names":["LoginForm","_ref","loginTC","captchaUrl","isFetching","useAppSelector","state","app","fetching","formik","useFormik","initialValues","email","password","rememberMe","captcha","validate","values","errors","test","trim","length","onSubmit","onSubmitProps","setStatus","setSubmitting","isAuth","auth","data","id","_jsx","Navigate","to","onCancelClick","resetForm","setTouched","_jsxs","className","css","handleSubmit","children","InputFormik","placeholder","getFieldProps","type","CheckboxFormik","label","status","style","color","src","alt","AuthButton","PreloaderSmall","NavLink","onClick","connect","_Fragment"],"sourceRoot":""}