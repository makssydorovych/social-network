{"version":3,"file":"static/js/315.c37d88e7.chunk.js","mappings":"mOACA,EAAuB,sBAAvB,EAA0D,4BCA1D,EAAuB,mB,SCQVA,EAAO,SAACC,GACnB,OACEC,EAAAA,EAAAA,MAAA,OAAKC,UAAWC,EAAaC,SAAA,EAC3BC,EAAAA,EAAAA,KAAA,OAAKC,IAAI,uDAAuDC,IAAI,QACnEP,EAAMQ,SACPH,EAAAA,EAAAA,KAAA,OAAAD,UACEH,EAAAA,EAAAA,MAAA,QAAAG,SAAA,CAAM,QAAMJ,EAAMS,kBAI1B,E,oBCNaC,EAAO,SAAAC,IAAAC,EAAAA,EAAAA,GAAAF,EAAAC,GAAA,IAAAE,GAAAC,EAAAA,EAAAA,GAAAJ,GAAA,SAAAA,IAAA,OAAAK,EAAAA,EAAAA,GAAA,KAAAL,GAAAG,EAAAG,MAAA,KAAAC,UAAA,CAmCjB,OAnCiBC,EAAAA,EAAAA,GAAAR,EAAA,EAAAS,IAAA,SAAAC,MAClB,WAAU,IAADC,EAAA,KACHC,EAAgBC,KAAKvB,MAAMwB,YAAYC,MAAMC,KAAI,SAACC,EAAIC,GAAK,OAC7DvB,EAAAA,EAAAA,KAACN,EAAI,CAAa8B,GAAIF,EAAGE,GAAIrB,QAASmB,EAAGnB,QAASC,WAAYkB,EAAGlB,YAAtDmB,EAAoE,IASjF,OACE3B,EAAAA,EAAAA,MAAA,OAAKC,UAAWC,EAAmBC,SAAA,EACjCC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,+BACJH,EAAAA,EAAAA,MAAA,OAAAG,SAAA,EACEC,EAAAA,EAAAA,KAAA,OAAAD,UACEC,EAAAA,EAAAA,KAACyB,EAAAA,GAAc,CAACC,SATI,SAACC,GAC3BX,EAAKrB,MAAMiC,oBAAoBD,EAAEE,cAAcd,MACjD,EAOuDA,MAAOG,KAAKvB,MAAMwB,YAAYW,aAAa/B,SAAC,gBAI7FH,EAAAA,EAAAA,MAAA,OAAAG,SAAA,EACEC,EAAAA,EAAAA,KAAC+B,EAAAA,EAAM,CAACC,QAjBW,WACzBhB,EAAKrB,MAAMsC,gBACb,EAe4ClC,SAAC,cACrCC,EAAAA,EAAAA,KAAA,SAAOkC,UAAQ,EAACC,sBAAuB,SAAAR,GAAC,MAA+B,KAA3BA,EAAEE,cAAcO,MAAc,EAACrC,UACzEC,EAAAA,EAAAA,KAAA,UAAQC,IAAI,8CAA8CoC,KAAK,oBAInErC,EAAAA,EAAAA,KAAA,OAAKH,UAAWC,EAAaC,UAC3BC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,gBAENC,EAAAA,EAAAA,KAAA,OAAKH,UAAWC,EAAaC,SAAEkB,SAIvC,KAACZ,CAAA,CAnCiB,CAASiC,EAAAA,eCmBhBC,GAAmBC,E,QAAAA,KAjBR,SAACC,GACvB,MAAO,CACLtB,YAAasB,EAAMtB,YAEvB,IAC2B,SAACuB,GAC1B,MAAO,CACLd,oBAAqB,SAACe,GACpB,IAAIC,GAASC,EAAAA,EAAAA,IAAsBF,GACnCD,EAASE,EACX,EACAX,eAAgB,WACdS,GAASI,EAAAA,EAAAA,MACX,EAEJ,GAEgCN,CAA6CnC,E","sources":["webpack://samurai-way/./src/components/SideWidgets/MyPosts/MyPosts.module.css?1f73","webpack://samurai-way/./src/components/SideWidgets/MyPosts/Post/Post.module.css?4e03","components/SideWidgets/MyPosts/Post/Post.tsx","components/SideWidgets/MyPosts/MyPosts.tsx","components/SideWidgets/MyPosts/MyPostsContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"item\":\"MyPosts_item__iBFQT\",\"postsBlock\":\"MyPosts_postsBlock__SvyM0\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__3SsJX\"};","import React from 'react';\r\nimport classes from './Post.module.css';\r\n\r\nexport type MessageType = {\r\n  id: string;\r\n  message: string;\r\n  likesCount: number;\r\n};\r\n\r\nexport const Post = (props: MessageType) => {\r\n  return (\r\n    <div className={classes.item}>\r\n      <img src=\"https://cabinet.miem.hse.ru/public-api/user/7/avatar\" alt=\"ava\" />\r\n      {props.message}\r\n      <div>\r\n        <span>like {props.likesCount}</span>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React, { ChangeEvent } from 'react';\r\nimport classes from './MyPosts.module.css';\r\nimport { Post } from './Post/Post';\r\nimport { ProfilePageType } from '../../../redux/profile-reducer';\r\nimport { TextAreaFormik } from '../../00-Common/InputFormik/InputFormik';\r\nimport { Button } from '../../00-Common/Button/Button';\r\n\r\ntype MyPostType = {\r\n  newPostTextOnChange: (newPostText: string) => void;\r\n  addPostOnClick: () => void;\r\n  profilePage: ProfilePageType;\r\n};\r\n\r\nexport class MyPosts extends React.PureComponent<MyPostType> {\r\n  render() {\r\n    let postsElements = this.props.profilePage.posts.map((el, index) => (\r\n      <Post key={index} id={el.id} message={el.message} likesCount={el.likesCount} />\r\n    ));\r\n    const postOnClickHandler = () => {\r\n      this.props.addPostOnClick();\r\n    };\r\n    const postOnChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n      this.props.newPostTextOnChange(e.currentTarget.value);\r\n    };\r\n\r\n    return (\r\n      <div className={classes.postsBlock}>\r\n        <h3>It`s demo component only!</h3>\r\n        <div>\r\n          <div>\r\n            <TextAreaFormik onChange={postOnChangeHandler} value={this.props.profilePage.newTextState}>\r\n              Add post\r\n            </TextAreaFormik>\r\n          </div>\r\n          <div>\r\n            <Button onClick={postOnClickHandler}>Add post</Button>\r\n            <audio controls onVolumeChangeCapture={e => e.currentTarget.volume === 0.2}>\r\n              <source src=\"http://sc.schwarze-welle.de:7500/;&type=mp3\" type=\"audio/mp3\" />\r\n            </audio>\r\n          </div>\r\n\r\n          <div className={classes.item}>\r\n            <h3>New Post</h3>\r\n          </div>\r\n          <div className={classes.item}>{postsElements}</div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// PureComponent as shouldComponentUpdate\r\n// but for functional component use HOC React.memo() -> wrap in this hoc your component\r\n\r\n// shouldComponentUpdate(nextProps: Readonly<MyPostType>, nextState: Readonly<{}>, nextContext: any): boolean {\r\n//     return  nextProps !== this.props || nextState !== this.state\r\n// }\r\n","import React from 'react';\r\nimport { addPostOnClickAC, newPostTextOnChangeAC, ProfilePageType } from '../../../redux/profile-reducer';\r\nimport { RootState } from '../../../redux/redux-store';\r\nimport { MyPosts } from './MyPosts';\r\nimport { Dispatch } from 'redux';\r\nimport { connect } from 'react-redux';\r\n\r\ntype mapStateToPropsType = {\r\n  profilePage: ProfilePageType;\r\n};\r\ntype mapDispatchToPropsType = {\r\n  newPostTextOnChange: (text: string) => void;\r\n  addPostOnClick: () => void;\r\n};\r\n\r\nconst mapStateToProps = (state: RootState): mapStateToPropsType => {\r\n  return {\r\n    profilePage: state.profilePage\r\n  };\r\n};\r\nconst mapDispatchToProps = (dispatch: Dispatch): mapDispatchToPropsType => {\r\n  return {\r\n    newPostTextOnChange: (text: string) => {\r\n      let action = newPostTextOnChangeAC(text);\r\n      dispatch(action);\r\n    },\r\n    addPostOnClick: () => {\r\n      dispatch(addPostOnClickAC());\r\n    }\r\n  };\r\n};\r\n\r\nexport const MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\r\n"],"names":["Post","props","_jsxs","className","classes","children","_jsx","src","alt","message","likesCount","MyPosts","_React$PureComponent","_inherits","_super","_createSuper","_classCallCheck","apply","arguments","_createClass","key","value","_this","postsElements","this","profilePage","posts","map","el","index","id","TextAreaFormik","onChange","e","newPostTextOnChange","currentTarget","newTextState","Button","onClick","addPostOnClick","controls","onVolumeChangeCapture","volume","type","React","MyPostsContainer","connect","state","dispatch","text","action","newPostTextOnChangeAC","addPostOnClickAC"],"sourceRoot":""}